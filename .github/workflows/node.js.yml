name: Node.js CI and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Install dependencies
        run: |
          npm install
          npm install @octokit/rest
      - name: Run build
        run: npm run build
      - name: Create or Update Release
        id: create_release
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            try {
              const { Octokit } = require("@octokit/rest");
              const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
              const tagName = context.ref.replace('refs/tags/', '');

              // 先尝试获取现有的 Release
              let existingRelease;
              try {
                existingRelease = await octokit.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: tagName
                });
              } catch (error) {
                // 如果没有找到现有 Release，则创建新的
                if (error.status !== 404) {
                  throw error;
                }
              }

              let response;
              if (existingRelease) {
                // 如果 Release 已存在，更新现有 Release
                response = await octokit.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.data.id,
                  name: `Release ${tagName}`,
                  draft: false,
                  prerelease: false
                });
              } else {
                // 创建新的 Release
                response = await octokit.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tagName,
                  name: `Release ${tagName}`,
                  draft: false,
                  prerelease: false
                });
              }

              core.setOutput('upload_url', response.data.upload_url)
            } catch (error) {
              core.setFailed(`Failed to create/update release: ${error.message}`);
            }
      - name: Upload Release Asset
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            try {
              const fs = require('fs');
              const { Octokit } = require("@octokit/rest");
              const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
              const uploadUrl = "${{ steps.create_release.outputs.upload_url }}";
              const assetPath = './dist/clg.js';
              const assetName = 'clg.js';
              const assetContentType = 'application/javascript';
              const asset = fs.readFileSync(assetPath);

              // 先删除可能存在的同名资源
              const release = await octokit.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: context.ref.replace('refs/tags/', '')
              });

              const existingAssets = await octokit.repos.listReleaseAssets({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });

              for (const asset of existingAssets.data) {
                if (asset.name === assetName) {
                  await octokit.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
                }
              }

              // 上传新资源
              await octokit.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: { 'content-type': assetContentType, 'content-length': asset.length },
                name: assetName,
                data: asset,
              });
            } catch (error) {
              core.setFailed(`Failed to upload release asset: ${error.message}`);
            }
